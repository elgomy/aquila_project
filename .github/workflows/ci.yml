# =============================================================================
# AQUILA PROJECT - CI/CD WORKFLOW
# =============================================================================
# Ejecuta en cada push y pull request a main/develop
# Valida código, ejecuta tests, y verifica seguridad
# =============================================================================

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # ---------------------------------------------------------------------------
  # Job 1: Lint & Format
  # ---------------------------------------------------------------------------
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort

      - name: Check code formatting (Black)
        run: black --check aquila_app/ aquila_bureaus_sdk/

      - name: Check import sorting (isort)
        run: isort --check-only aquila_app/ aquila_bureaus_sdk/

      - name: Lint with flake8
        run: |
          # Stop build if there are Python syntax errors or undefined names
          flake8 aquila_app/ aquila_bureaus_sdk/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings (max line length 120)
          flake8 aquila_app/ aquila_bureaus_sdk/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

  # ---------------------------------------------------------------------------
  # Job 2: Type Checking
  # ---------------------------------------------------------------------------
  type-check:
    name: Type Checking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy types-PyYAML types-redis
          pip install -r requirements.txt

      - name: Run mypy
        run: mypy aquila_app/ --ignore-missing-imports

  # ---------------------------------------------------------------------------
  # Job 3: Security Scanning
  # ---------------------------------------------------------------------------
  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit (security linter)
        run: bandit -r aquila_app/ aquila_bureaus_sdk/ -f json -o bandit-report.json || true

      - name: Check dependency vulnerabilities (Safety)
        run: safety check --json || true

  # ---------------------------------------------------------------------------
  # Job 4: Tests
  # ---------------------------------------------------------------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=aquila_app --cov-report=xml --cov-report=html
        env:
          # Variables de entorno para tests (usar secrets en producción)
          ENVIRONMENT: test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ---------------------------------------------------------------------------
  # Job 5: Build Check
  # ---------------------------------------------------------------------------
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint, type-check, security, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify imports
        run: |
          python -c "import aquila_app; print('✅ Main package imports successfully')"

      - name: Build summary
        run: |
          echo "✅ All checks passed!"
          echo "- Code formatting: OK"
          echo "- Type checking: OK"
          echo "- Security scanning: OK"
          echo "- Tests: OK"
          echo "- Build verification: OK"
